#include "../Location.hpp"

#include <iostream>
#include <fstream>
#include <filesystem>

namespace fs = std::filesystem;


void Location::init() const{
    std::string old_path = fs::current_path();

    std::string cpp_sync_directory = path /  "/.cppSync/";
    fs::create_directory(cpp_sync_directory);
    fs::current_path(cpp_sync_directory);

    fs::create_directory("hashes");
    fs::create_directory("what_changed");
    fs::create_directory("duplicates");
    fs::create_directory("configs");
    fs::current_path(cpp_sync_directory + "configs");
    std::ofstream touch_configfile(".config");
    touch_configfile.close();
    std::ofstream touch_whitelist("whitelist.txt");
    touch_whitelist.close();
    std::ofstream touch_blacklist("blacklist.txt");
    touch_blacklist.close();
    std::ofstream touch_backup_locations("backup_locations.txt");
    touch_backup_locations.close();

    std::fstream config_file;
    config_file.open(".config",std::ios::out);
    if(config_file.is_open()){
        config_file << "# This is the configuration file."                                                  << std::endl;
        config_file << "# Rules for editing:"                                                               << std::endl;
        config_file << "#    1. Do NOT edit this File, everything in here can be"                           << std::endl;
        config_file << "#       edited with $cppsync --configure."                                          << std::endl;
        config_file << "#    2. If u still want to edit this file u should know"                            << std::endl;
        config_file << "#       that even spaces can break it."                                             << std::endl;
        config_file << R"({"bak": "003", "per_file": "true"})"                                              << std::endl;
        config_file.close();
    } else{
        std::cerr << "FAILED TO OPEN THE .CONFIG FILE."                                                     << std::endl;
    }

    std::fstream whitelist;
    config_file.open("whitelist.txt",std::ios::out);
    if(config_file.is_open()){
        whitelist << "# In this file u can list everything [Files/Directories] the Tool should backup."     << std::endl;
        whitelist << "# Rules for editing:"                                                                 << std::endl;
        whitelist << "#   1. No unnecessary spaces."                                                        << std::endl;
        whitelist << "#   2. One path per line."                                                            << std::endl;
        whitelist << "#   3. Comments must start with a '#' as the first character in the line."            << std::endl;
        whitelist << "#   4. The paths must be relative to the root of the synced directory."               << std::endl;
        whitelist << "# Whitelisted files and directories will be backed up, even if they are in a"         << std::endl;
        whitelist << "# blacklisted directory."                                                             << std::endl;
        whitelist.close();
    } else{
        std::cout << "FAILED TO OPEN THE FILE WHICH CONTAINS THE WHITELIST."                                << std::endl;
    }

    std::fstream blacklist;
    config_file.open("blacklist.txt",std::ios::out);
    if(config_file.is_open()){
        blacklist << "# In this file u can list everything [Files/Directories] the Tool shouldn't backup."  << std::endl;
        blacklist << "# Rules for editing:"                                                                 << std::endl;
        blacklist << "#   1. No unnecessary spaces."                                                        << std::endl;
        blacklist << "#   2. One path per line."                                                            << std::endl;
        blacklist << "#   3. Comments must start with a '#' as the first character in the line."            << std::endl;
        blacklist << "#   4. The paths must be relative to the root of the synced directory."               << std::endl;
        blacklist << "# Blacklisted files and directories wont be backed up, but if u whitelist a file or"  << std::endl;
        blacklist << "# directory which is in a blacklisted directory it will be backed up anyways."        << std::endl;
        blacklist.close();
    } else{
        std::cout << "FAILED TO OPEN THE FILE WHICH CONTAINS THE BLACKLIST."                                << std::endl;
    }

    std::fstream locations;
    config_file.open("backup_locations.txt",std::ios::out);
    if(config_file.is_open()){
        locations << "# In this file u can list the backup locations (e.g. USB-Sticks, HDDs, SSDs, ...)."   << std::endl;
        locations << "# Rules for editing:"                                                                 << std::endl;
        locations << "#   1. No unnecessary spaces."                                                        << std::endl;
        locations << "#   2. One path per line."                                                            << std::endl;
        locations << "#   3. Comments must start with a '#' as the first character in the line."            << std::endl;
        locations << "#   4. The paths must be absolute paths (from the root directory of ur filesystem)."  << std::endl;
        locations.close();
    } else{
        std::cout << "FAILED TO OPEN THE FILE WHICH CONTAINS THE BACKUP LOCATIONS."                         << std::endl;
    }

    std::cout << "Configure backup locations in .cppSync/configs/backup_locations.txt"                      << std::endl;
    std::cout << "Configure whitelisted directories in .cppSync/configs/whitelist.txt"                      << std::endl;
    std::cout << "Configure blacklisted directories in .cppSync/configs/blacklist.txt"                      << std::endl;
    std::cout << "Use the command \"cppsync --configure\" to edit other options."                           << std::endl;
    std::cout                                                                                               << std::endl;
    std::cout <<  "DISCLAIMER:"                                                                             << std::endl;
    std::cout << "  cppSync does not backup empty directories."                                             << std::endl;
    std::cout << "  cppSync is published under the GNU General Public License v3.0"                         << std::endl;
    std::cout << "  -> The author of this tool is not responsible for anything!"                            << std::endl;

    fs::current_path(old_path);
}
